# Refer to the Fortify ScanCentral DAST Configuration and Usage Guide for more details.
# Environment variable placeholders may be used in the format ${ENVIRONMENT VARIABLE NAME}. Any environment variable placeholder will be replaced during runtime.

databaseSettings:
  # databaseProvider indicates the type of database that will be used.
  # Allowed values: SQLServer, PostgreSQL, AzureSQLServer, AzurePostgreSQL, AmazonRdsSQLServer, AmazonRdsPostgreSQL
  databaseProvider: ${DAST_DB_TYPE}
  server: ${DAST_DB_SERVER}
  database: ${DAST_DB_DATABASE}
  # dboLevelDatabaseAccount is not required if the database already exists and migration scripts have already been applied.
  # A migration script can be created using the 'generateMigrationScript' command.
  dboLevelDatabaseAccount:
    username: ${DAST_DB_DBO_USER}
    # An encrypted password is recommended. The password can be encrypted using the 'encrypt' command.
    password: ${DAST_DB_DBO_PASSWORD}
    # Allowed values: true, false
    useWindowsAuthentication: false
    additionalConnectionProperties: ${DAST_DB_ADDITIONAL_CON_PROPERTIES}
  standardDatabaseAccount:
    username: ${DAST_DB_STD_USER}
    # An encrypted password is recommended. The password can be encrypted using the 'encrypt' command.
    password: ${DAST_DB_STD_PASSWORD}
    # Allowed values: true, false
    createLogin: false
    additionalConnectionProperties: ${DAST_DB_ADDITIONAL_CON_PROPERTIES}
# Allowed values: true, false
retainCompletedScans: true
# Allowed values: true, false
disableAdvancedScanPrioritization: false
# Allowed values: true, false
enableRestrictedScanSettings: false
# An encrypted serviceToken is recommended. The password can be encrypted using the 'encrypt' command.
serviceToken: ${DAST_SERVICE_TOKEN}
smartUpdateSettings:
  smartUpdateUrl: https://smartupdate.fortify.microfocus.com/
  licensingUrl: https://licenseservice.fortify.microfocus.com/
sSCSettings:
  sSCRootUrl: ${SSC_URL}
  serviceAccountUserName: ${SSC_USER}
  # An encrypted password is recommended. The password can be encrypted using the 'encrypt' command.
  serviceAccountPassword: ${SSC_PASSWORD}
  kafkaSettings:
    # Indicates if SC DAST should handle SSC Kafka finding audit events
    isEnabled: false
    # Comma delimited list of servers for the SSC Kafka instance
    bootstrapServers: server1,server2,server3
    # The SSC Kafka group id for SC DAST. This should be unique to SC DAST and no other consumers should use this group id
    findingAuditGroupId: SCDASTFindingAuditGroup
    # The SSC Kafka topic for finding audit events.
    findingAuditTopic: FindingAuditTopic
    # Allowed values: SSL or Plaintext
    securityProtocolType: SSL
    # sSLSettings is required if securityProtocolType = SSL
    sSLSettings:
      # File or directory path to CA certificate(s) for verifying the server's key.
      cALocation: /etc/sha2ca.cer
      # Path to client's public key (PEM) used for authentication
      certificateLocation: /etc/ssckafka.cer
      enableSslCertificateVerification: true
      # Path to client's private key (PEM) used for authentication.
      keyLocation: /etc/ssckafka.key
      # An encrypted password is recommended. The password can be encrypted using the 'encrypt' command.
      keyPassword: password
dASTApiSettings:
  rootUrl: https://${DAST_API_HOST}:${DAST_API_PORT}
  containerListenIPAddress: ""
  containerListenPort: ${DAST_API_CONTAINER_PORT}
  disableCorsOrigins: true # Allowed values: true, false
  # One ore more corsOrigins entries is required if disableCorsOrigins = false
  # Each entry should be on a separate line and start with a dash (-) followed by a space
  corsOrigins:
    - ${SSC_URL}
    - https://${DAST_API_HOST}:${DAST_API_PORT}
lIMSettings:
  limUrl: ${LIM_URL}
  serviceAccountUserName: ${LIM_USERNAME}
  # An encrypted password is recommended. The password can be encrypted using the 'encrypt' command.
  serviceAccountPassword: ${LIM_PASSWORD}
  defaultLimPoolName: ${LIM_POOL}
  # An encrypted password is recommended. The password can be encrypted using the 'encrypt' command.
  defaultLimPoolPassword: ${LIM_POOL_PASSWORD}
  # Allowed values: true, false # Allowed values: true, false. This should be set to true if you plan on using the Linux version of WebInspect scanner
  useLimRestApi: ${LIM_USE_API}
utilityWorkerServiceSettings:
  rootUrl: https://${DAST_UTILITYSERVICE_HOST}:${DAST_UTILITYSERVICE_PORT}
dastApiSSLSettings:
  sSLPreferenceType: ${DAST_API_SSL} # Allowed values: GenerateCertificate, UseExistingCertificate, NoSSL
  # generateCertificateModel is required if sSLPreferenceType =  GenerateCertificate
  generateCertificateModel:
    certificateDirectory: c:\directory_where_certificate_is_saved
    host: dast-api
    # An encrypted password is recommended. The password can be encrypted using the 'encrypt' command.
    password: password
    validity: 1000
    location: Alpharetta
    email: email@domain.com
  # existingCertificateModel is required if sSLPreferenceType =  UseExistingCertificate
  existingCertificateModel:
    certificateFullPath: /app/secrets/${DAST_API_SSL_CERT}
    # An encrypted password is recommended. The password can be encrypted using the 'encrypt' command.
    password: ${DAST_API_SSL_CERT_PASSWORD}
utilityWorkerServiceSSLSettings:
  # Allowed values: GenerateCertificate, UseExistingCertificate, NoSSL
  sSLPreferenceType: ${DAST_UTILITY_SSL}
  # generateCertificateModel is required if sSLPreferenceType =  GenerateCertificate
  generateCertificateModel:
    certificateDirectory: c:\directory_where_certificate_is_saved
    host: dast-utility-service
    # An encrypted password is recommended. The password can be encrypted using the 'encrypt' command.
    password: password
    validity: 1000
    location: Alpharetta
    email: email@domain.com
  # existingCertificateModel is required if sSLPreferenceType =  UseExistingCertificate
  existingCertificateModel:
    certificateFullPath: /app/secrets/${DAST_UTILITY_SSL_CERT}
    # An encrypted password is recommended. The password can be encrypted using the 'encrypt' command.
    password: ${DAST_UTILITY_SSL_CERT_PASSWORD}
environmentSettings:
  # Allowed values: true, false
  allowNonTrustedServerCertificate: true
  proxySettings:
    # Allowed values: true, false
    useProxy: false
    proxyAddress: ""
    # An encrypted password is recommended. The password can be encrypted using the 'encrypt' command.
    proxyPassword: ""
    proxyUserName: ""
    proxyBypassList: dast-api,dast-utility-service,lim-server-instance,ssc-instancedast-api,dast-utility-service,lim-server-instance,ssc-instance
# Allowed values: true, false
applySecureBase: ${DAST_APPLY_SECUREBASE}
# secureBasePath is required if applySecureBase =  true
secureBasePath: ${DAST_SECUREBASE_PATH}
debrickedSettings:
  accessToken: ${DEBRICKED_TOKEN}
